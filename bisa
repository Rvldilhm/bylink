/* Fill-in information from Blynk Device Info here */
#define BLYNK_TEMPLATE_ID "TMPL64kx7BMnh"
#define BLYNK_TEMPLATE_NAME "relay"
#define BLYNK_AUTH_TOKEN "M2laaUXwKszwPezQeVTfHx8VyNrFnRGk"

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>

char ssid[] = "Minta izin dulu";
char pass[] = "rivaldiilham";

#define DHTPIN 4
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
BlynkTimer timer;

bool autoMode = false;
int temperatureThreshold = 90; // Initial temperature threshold
int ledPin = 5; // Pin connected to the LED

BLYNK_WRITE(V0) {
  int value = param.asInt();
  Blynk.virtualWrite(V1, value);
  Serial.println(value);
  if (!autoMode) {
    // In manual mode, use the button (V0) to control the LED
    digitalWrite(ledPin, value == 1);
  }
}

BLYNK_WRITE(V6) {
  int value = param.asInt();
  Blynk.virtualWrite(V7, value);
  Serial.println(value);
  autoMode = (value == 1);
  if (autoMode) {
    // In auto mode, update the LED state based on the temperature threshold
    updateLEDState();
  }
}

BLYNK_WRITE(V8) {
  temperatureThreshold = param.asInt();
  Blynk.virtualWrite(V9, temperatureThreshold);
  if (autoMode) {
    // If in auto mode, update the LED state when the threshold changes
    updateLEDState();
  }
}

BLYNK_CONNECTED() {
  Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
  Blynk.setProperty(V3, "onImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
  Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}

void myTimerEvent() {
  Blynk.virtualWrite(V2, millis() / 1000);
  sendSensor();
  if (autoMode) {
    // Update the LED state based on the temperature threshold in auto mode
    updateLEDState();
  }
}

void sendSensor() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  Blynk.virtualWrite(V4, h);
  Blynk.virtualWrite(V5, t);
}

void updateLEDState() {
  if (autoMode) {
    // Check and update the LED state based on the temperature threshold
    float t = dht.readTemperature();
    if (!isnan(t) && t <= temperatureThreshold) {
      digitalWrite(ledPin, HIGH);
    } else {
      digitalWrite(ledPin, LOW);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT); // Pin connected to the LED
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  dht.begin();
  timer.setInterval(1000L, myTimerEvent);
  // Initialize autoMode
  autoMode = false;
}

void loop() {
  Blynk.run();
  timer.run();
}
